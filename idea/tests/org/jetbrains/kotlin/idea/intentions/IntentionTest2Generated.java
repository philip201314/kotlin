/*
 * Copyright 2010-2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.idea.intentions;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/intentions/loopToCallChain")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class IntentionTest2Generated extends AbstractIntentionTest2 {
    @TestMetadata("addToCollection.kt")
    public void testAddToCollection() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/addToCollection.kt");
        doTest(fileName);
    }

    @TestMetadata("addToCollection_addAfterLoop.kt")
    public void testAddToCollection_addAfterLoop() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/addToCollection_addAfterLoop.kt");
        doTest(fileName);
    }

    @TestMetadata("addToCollection_badReceiver1.kt")
    public void testAddToCollection_badReceiver1() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/addToCollection_badReceiver1.kt");
        doTest(fileName);
    }

    @TestMetadata("addToCollection_badReceiver2.kt")
    public void testAddToCollection_badReceiver2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/addToCollection_badReceiver2.kt");
        doTest(fileName);
    }

    @TestMetadata("addToCollection_goodReceiver.kt")
    public void testAddToCollection_goodReceiver() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/addToCollection_goodReceiver.kt");
        doTest(fileName);
    }

    public void testAllFilesPresentInLoopToCallChain() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/loopToCallChain"), Pattern.compile("^([\\w\\-_]+)\\.kt$"), true);
    }

    @TestMetadata("any_ifAssign.kt")
    public void testAny_ifAssign() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/any_ifAssign.kt");
        doTest(fileName);
    }

    @TestMetadata("any_ifAssign_moveDeclaration.kt")
    public void testAny_ifAssign_moveDeclaration() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/any_ifAssign_moveDeclaration.kt");
        doTest(fileName);
    }

    @TestMetadata("any_ifAssign_moveInitialization.kt")
    public void testAny_ifAssign_moveInitialization() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/any_ifAssign_moveInitialization.kt");
        doTest(fileName);
    }

    @TestMetadata("any_ifAssign_noBreak.kt")
    public void testAny_ifAssign_noBreak() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/any_ifAssign_noBreak.kt");
        doTest(fileName);
    }

    @TestMetadata("any_ifAssign_nonBooleanResult.kt")
    public void testAny_ifAssign_nonBooleanResult() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/any_ifAssign_nonBooleanResult.kt");
        doTest(fileName);
    }

    @TestMetadata("any_ifAssign_nonBooleanResult2.kt")
    public void testAny_ifAssign_nonBooleanResult2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/any_ifAssign_nonBooleanResult2.kt");
        doTest(fileName);
    }

    @TestMetadata("any_ifReturn.kt")
    public void testAny_ifReturn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/any_ifReturn.kt");
        doTest(fileName);
    }

    @TestMetadata("any_ifReturn_nonBooleanResult.kt")
    public void testAny_ifReturn_nonBooleanResult() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/any_ifReturn_nonBooleanResult.kt");
        doTest(fileName);
    }

    @TestMetadata("any_indexNeeded.kt")
    public void testAny_indexNeeded() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/any_indexNeeded.kt");
        doTest(fileName);
    }

    @TestMetadata("any_return.kt")
    public void testAny_return() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/any_return.kt");
        doTest(fileName);
    }

    @TestMetadata("array.kt")
    public void testArray() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/array.kt");
        doTest(fileName);
    }

    @TestMetadata("asSequenceOnly.kt")
    public void testAsSequenceOnly() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/asSequenceOnly.kt");
        doTest(fileName);
    }

    @TestMetadata("assignFilter.kt")
    public void testAssignFilter() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/assignFilter.kt");
        doTest(fileName);
    }

    @TestMetadata("assignFilter2.kt")
    public void testAssignFilter2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/assignFilter2.kt");
        doTest(fileName);
    }

    @TestMetadata("assignFilterIndexed.kt")
    public void testAssignFilterIndexed() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/assignFilterIndexed.kt");
        doTest(fileName);
    }

    @TestMetadata("assignFilterNotNull.kt")
    public void testAssignFilterNotNull() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/assignFilterNotNull.kt");
        doTest(fileName);
    }

    @TestMetadata("assignFilter_ArrayListRequired.kt")
    public void testAssignFilter_ArrayListRequired() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/assignFilter_ArrayListRequired.kt");
        doTest(fileName);
    }

    @TestMetadata("assignFilter_ArrayListRequired2.kt")
    public void testAssignFilter_ArrayListRequired2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/assignFilter_ArrayListRequired2.kt");
        doTest(fileName);
    }

    @TestMetadata("assignFilter_ArrayListRequired3.kt")
    public void testAssignFilter_ArrayListRequired3() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/assignFilter_ArrayListRequired3.kt");
        doTest(fileName);
    }

    @TestMetadata("assignFilter_MutableListRequired.kt")
    public void testAssignFilter_MutableListRequired() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/assignFilter_MutableListRequired.kt");
        doTest(fileName);
    }

    @TestMetadata("assignFilter_breakAndContinue.kt")
    public void testAssignFilter_breakAndContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/assignFilter_breakAndContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("assignMap.kt")
    public void testAssignMap() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/assignMap.kt");
        doTest(fileName);
    }

    @TestMetadata("assignMap2.kt")
    public void testAssignMap2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/assignMap2.kt");
        doTest(fileName);
    }

    @TestMetadata("contains.kt")
    public void testContains() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/contains.kt");
        doTest(fileName);
    }

    @TestMetadata("contains2.kt")
    public void testContains2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/contains2.kt");
        doTest(fileName);
    }

    @TestMetadata("contains3.kt")
    public void testContains3() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/contains3.kt");
        doTest(fileName);
    }

    @TestMetadata("contains4.kt")
    public void testContains4() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/contains4.kt");
        doTest(fileName);
    }

    @TestMetadata("count1.kt")
    public void testCount1() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/count1.kt");
        doTest(fileName);
    }

    @TestMetadata("count2.kt")
    public void testCount2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/count2.kt");
        doTest(fileName);
    }

    @TestMetadata("count_Long.kt")
    public void testCount_Long() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/count_Long.kt");
        doTest(fileName);
    }

    @TestMetadata("count_nonConstantInitial.kt")
    public void testCount_nonConstantInitial() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/count_nonConstantInitial.kt");
        doTest(fileName);
    }

    @TestMetadata("count_nonZeroInitial.kt")
    public void testCount_nonZeroInitial() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/count_nonZeroInitial.kt");
        doTest(fileName);
    }

    @TestMetadata("count_prefix.kt")
    public void testCount_prefix() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/count_prefix.kt");
        doTest(fileName);
    }

    @TestMetadata("count_variableUsedBefore.kt")
    public void testCount_variableUsedBefore() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/count_variableUsedBefore.kt");
        doTest(fileName);
    }

    @TestMetadata("customTypeWithIterator.kt")
    public void testCustomTypeWithIterator() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/customTypeWithIterator.kt");
        doTest(fileName);
    }

    @TestMetadata("embeddedBreak1.kt")
    public void testEmbeddedBreak1() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/embeddedBreak1.kt");
        doTest(fileName);
    }

    @TestMetadata("embeddedBreak2.kt")
    public void testEmbeddedBreak2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/embeddedBreak2.kt");
        doTest(fileName);
    }

    @TestMetadata("embeddedContinue.kt")
    public void testEmbeddedContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/embeddedContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("filterIndexed.kt")
    public void testFilterIndexed() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterIndexed.kt");
        doTest(fileName);
    }

    @TestMetadata("filterIndexed2.kt")
    public void testFilterIndexed2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterIndexed2.kt");
        doTest(fileName);
    }

    @TestMetadata("filterIndexedAndFlatMapWithContinue.kt")
    public void testFilterIndexedAndFlatMapWithContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterIndexedAndFlatMapWithContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("filterIndexedTo.kt")
    public void testFilterIndexedTo() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterIndexedTo.kt");
        doTest(fileName);
    }

    @TestMetadata("filterIndexedTo2.kt")
    public void testFilterIndexedTo2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterIndexedTo2.kt");
        doTest(fileName);
    }

    @TestMetadata("filterIndexed_indexChangedTwice.kt")
    public void testFilterIndexed_indexChangedTwice() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterIndexed_indexChangedTwice.kt");
        doTest(fileName);
    }

    @TestMetadata("filterIndexed_indexStartNotZero.kt")
    public void testFilterIndexed_indexStartNotZero() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterIndexed_indexStartNotZero.kt");
        doTest(fileName);
    }

    @TestMetadata("filterIndexed_indexUsedAfter.kt")
    public void testFilterIndexed_indexUsedAfter() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterIndexed_indexUsedAfter.kt");
        doTest(fileName);
    }

    @TestMetadata("filterIndexed_indexUsedEarlierInLoop.kt")
    public void testFilterIndexed_indexUsedEarlierInLoop() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterIndexed_indexUsedEarlierInLoop.kt");
        doTest(fileName);
    }

    @TestMetadata("filterIndexed_merge1.kt")
    public void testFilterIndexed_merge1() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterIndexed_merge1.kt");
        doTest(fileName);
    }

    @TestMetadata("filterIndexed_merge2.kt")
    public void testFilterIndexed_merge2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterIndexed_merge2.kt");
        doTest(fileName);
    }

    @TestMetadata("filterIndexed_merge3.kt")
    public void testFilterIndexed_merge3() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterIndexed_merge3.kt");
        doTest(fileName);
    }

    @TestMetadata("filterIndexed_merge4.kt")
    public void testFilterIndexed_merge4() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterIndexed_merge4.kt");
        doTest(fileName);
    }

    @TestMetadata("filterIndexed_twoIndices.kt")
    public void testFilterIndexed_twoIndices() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterIndexed_twoIndices.kt");
        doTest(fileName);
    }

    @TestMetadata("filterIndexed_twoIndicesUsed.kt")
    public void testFilterIndexed_twoIndicesUsed() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterIndexed_twoIndicesUsed.kt");
        doTest(fileName);
    }

    @TestMetadata("filterIsInstance.kt")
    public void testFilterIsInstance() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterIsInstance.kt");
        doTest(fileName);
    }

    @TestMetadata("filterIsInstanceTo.kt")
    public void testFilterIsInstanceTo() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterIsInstanceTo.kt");
        doTest(fileName);
    }

    @TestMetadata("filterIsInstance_ifContinue.kt")
    public void testFilterIsInstance_ifContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterIsInstance_ifContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("filterNotNull.kt")
    public void testFilterNotNull() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterNotNull.kt");
        doTest(fileName);
    }

    @TestMetadata("filterNotNullTo.kt")
    public void testFilterNotNullTo() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterNotNullTo.kt");
        doTest(fileName);
    }

    @TestMetadata("filterNotNullTo2.kt")
    public void testFilterNotNullTo2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterNotNullTo2.kt");
        doTest(fileName);
    }

    @TestMetadata("filterNotNull_ifContinue.kt")
    public void testFilterNotNull_ifContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterNotNull_ifContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("filterNotTo.kt")
    public void testFilterNotTo() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterNotTo.kt");
        doTest(fileName);
    }

    @TestMetadata("filterNot_ifContinue.kt")
    public void testFilterNot_ifContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterNot_ifContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("filterTo.kt")
    public void testFilterTo() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterTo.kt");
        doTest(fileName);
    }

    @TestMetadata("filterTo2.kt")
    public void testFilterTo2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filterTo2.kt");
        doTest(fileName);
    }

    @TestMetadata("filter_ifContinue.kt")
    public void testFilter_ifContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filter_ifContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("filter_ifContinue2.kt")
    public void testFilter_ifContinue2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filter_ifContinue2.kt");
        doTest(fileName);
    }

    @TestMetadata("filter_ifContinueInBlock.kt")
    public void testFilter_ifContinueInBlock() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filter_ifContinueInBlock.kt");
        doTest(fileName);
    }

    @TestMetadata("filter_ifContinueWithLabel.kt")
    public void testFilter_ifContinueWithLabel() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filter_ifContinueWithLabel.kt");
        doTest(fileName);
    }

    @TestMetadata("filter_inputVarNotUsed.kt")
    public void testFilter_inputVarNotUsed() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filter_inputVarNotUsed.kt");
        doTest(fileName);
    }

    @TestMetadata("filter_inputVariableNotUsed.kt")
    public void testFilter_inputVariableNotUsed() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filter_inputVariableNotUsed.kt");
        doTest(fileName);
    }

    @TestMetadata("filter_mergeMultiple.kt")
    public void testFilter_mergeMultiple() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/filter_mergeMultiple.kt");
        doTest(fileName);
    }

    @TestMetadata("firstOrNull_assignmentInitialization.kt")
    public void testFirstOrNull_assignmentInitialization() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/firstOrNull_assignmentInitialization.kt");
        doTest(fileName);
    }

    @TestMetadata("firstOrNull_cannotUseLet.kt")
    public void testFirstOrNull_cannotUseLet() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/firstOrNull_cannotUseLet.kt");
        doTest(fileName);
    }

    @TestMetadata("firstOrNull_ifAssign.kt")
    public void testFirstOrNull_ifAssign() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/firstOrNull_ifAssign.kt");
        doTest(fileName);
    }

    @TestMetadata("firstOrNull_ifAssign_breakWithLabel.kt")
    public void testFirstOrNull_ifAssign_breakWithLabel() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/firstOrNull_ifAssign_breakWithLabel.kt");
        doTest(fileName);
    }

    @TestMetadata("firstOrNull_ifAssign_cannotBeVal.kt")
    public void testFirstOrNull_ifAssign_cannotBeVal() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/firstOrNull_ifAssign_cannotBeVal.kt");
        doTest(fileName);
    }

    @TestMetadata("firstOrNull_ifAssign_preserveComments.kt")
    public void testFirstOrNull_ifAssign_preserveComments() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/firstOrNull_ifAssign_preserveComments.kt");
        doTest(fileName);
    }

    @TestMetadata("firstOrNull_ifAssign_variableUsedBefore.kt")
    public void testFirstOrNull_ifAssign_variableUsedBefore() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/firstOrNull_ifAssign_variableUsedBefore.kt");
        doTest(fileName);
    }

    @TestMetadata("firstOrNull_ifReturn.kt")
    public void testFirstOrNull_ifReturn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/firstOrNull_ifReturn.kt");
        doTest(fileName);
    }

    @TestMetadata("firstOrNull_let.kt")
    public void testFirstOrNull_let() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/firstOrNull_let.kt");
        doTest(fileName);
    }

    @TestMetadata("firstOrNull_let2.kt")
    public void testFirstOrNull_let2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/firstOrNull_let2.kt");
        doTest(fileName);
    }

    @TestMetadata("firstOrNull_letOrNotNull.kt")
    public void testFirstOrNull_letOrNotNull() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/firstOrNull_letOrNotNull.kt");
        doTest(fileName);
    }

    @TestMetadata("firstOrNull_return.kt")
    public void testFirstOrNull_return() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/firstOrNull_return.kt");
        doTest(fileName);
    }

    @TestMetadata("firstOrNull_returnExpression.kt")
    public void testFirstOrNull_returnExpression() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/firstOrNull_returnExpression.kt");
        doTest(fileName);
    }

    @TestMetadata("firstOrNull_returnExpressionOrNotNull.kt")
    public void testFirstOrNull_returnExpressionOrNotNull() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/firstOrNull_returnExpressionOrNotNull.kt");
        doTest(fileName);
    }

    @TestMetadata("firstOrNull_returnNotNullIfNone.kt")
    public void testFirstOrNull_returnNotNullIfNone() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/firstOrNull_returnNotNullIfNone.kt");
        doTest(fileName);
    }

    @TestMetadata("firstOrNull_returnNotNullIfNone2.kt")
    public void testFirstOrNull_returnNotNullIfNone2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/firstOrNull_returnNotNullIfNone2.kt");
        doTest(fileName);
    }

    @TestMetadata("firstOrNull_return_comment.kt")
    public void testFirstOrNull_return_comment() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/firstOrNull_return_comment.kt");
        doTest(fileName);
    }

    @TestMetadata("firstOrNull_safeDotExpression.kt")
    public void testFirstOrNull_safeDotExpression() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/firstOrNull_safeDotExpression.kt");
        doTest(fileName);
    }

    @TestMetadata("firstOrNull_withMergedFilter.kt")
    public void testFirstOrNull_withMergedFilter() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/firstOrNull_withMergedFilter.kt");
        doTest(fileName);
    }

    @TestMetadata("flatMap.kt")
    public void testFlatMap() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/flatMap.kt");
        doTest(fileName);
    }

    @TestMetadata("flatMapTo.kt")
    public void testFlatMapTo() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/flatMapTo.kt");
        doTest(fileName);
    }

    @TestMetadata("flatMapTo2.kt")
    public void testFlatMapTo2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/flatMapTo2.kt");
        doTest(fileName);
    }

    @TestMetadata("flatMapTo3.kt")
    public void testFlatMapTo3() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/flatMapTo3.kt");
        doTest(fileName);
    }

    @TestMetadata("flatMapWithBreak.kt")
    public void testFlatMapWithBreak() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/flatMapWithBreak.kt");
        doTest(fileName);
    }

    @TestMetadata("flatMapWithContinue.kt")
    public void testFlatMapWithContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/flatMapWithContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("flatMapWithWrongBreak.kt")
    public void testFlatMapWithWrongBreak() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/flatMapWithWrongBreak.kt");
        doTest(fileName);
    }

    @TestMetadata("flatMap_indexUsed.kt")
    public void testFlatMap_indexUsed() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/flatMap_indexUsed.kt");
        doTest(fileName);
    }

    @TestMetadata("flatMap_notIterable.kt")
    public void testFlatMap_notIterable() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/flatMap_notIterable.kt");
        doTest(fileName);
    }

    @TestMetadata("flatMap_workingVarStillNeeded.kt")
    public void testFlatMap_workingVarStillNeeded() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/flatMap_workingVarStillNeeded.kt");
        doTest(fileName);
    }

    @TestMetadata("flatMap_wrongContinue.kt")
    public void testFlatMap_wrongContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/flatMap_wrongContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("forEach.kt")
    public void testForEach() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/forEach.kt");
        doTest(fileName);
    }

    @TestMetadata("forEachIndexed.kt")
    public void testForEachIndexed() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/forEachIndexed.kt");
        doTest(fileName);
    }

    @TestMetadata("forEachIndexed_nothingElse.kt")
    public void testForEachIndexed_nothingElse() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/forEachIndexed_nothingElse.kt");
        doTest(fileName);
    }

    @TestMetadata("forEach_notAvailable.kt")
    public void testForEach_notAvailable() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/forEach_notAvailable.kt");
        doTest(fileName);
    }

    @TestMetadata("forEach_notIndexed.kt")
    public void testForEach_notIndexed() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/forEach_notIndexed.kt");
        doTest(fileName);
    }

    @TestMetadata("indexOf.kt")
    public void testIndexOf() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/indexOf.kt");
        doTest(fileName);
    }

    @TestMetadata("indexOfFirst_ifAssign.kt")
    public void testIndexOfFirst_ifAssign() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/indexOfFirst_ifAssign.kt");
        doTest(fileName);
    }

    @TestMetadata("indexOfFirst_ifReturn.kt")
    public void testIndexOfFirst_ifReturn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/indexOfFirst_ifReturn.kt");
        doTest(fileName);
    }

    @TestMetadata("indexOfFirst_mustBeNoIndexInCondition.kt")
    public void testIndexOfFirst_mustBeNoIndexInCondition() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/indexOfFirst_mustBeNoIndexInCondition.kt");
        doTest(fileName);
    }

    @TestMetadata("indexOfLast_ifAssign.kt")
    public void testIndexOfLast_ifAssign() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/indexOfLast_ifAssign.kt");
        doTest(fileName);
    }

    @TestMetadata("indexPlusPlusInsideExpression.kt")
    public void testIndexPlusPlusInsideExpression() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/indexPlusPlusInsideExpression.kt");
        doTest(fileName);
    }

    @TestMetadata("indexPlusPlusInsideExpression_indexUsedAfterIncrement.kt")
    public void testIndexPlusPlusInsideExpression_indexUsedAfterIncrement() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/indexPlusPlusInsideExpression_indexUsedAfterIncrement.kt");
        doTest(fileName);
    }

    @TestMetadata("indexPlusPlusInsideExpression_indexUsedBeforeIncrement.kt")
    public void testIndexPlusPlusInsideExpression_indexUsedBeforeIncrement() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/indexPlusPlusInsideExpression_indexUsedBeforeIncrement.kt");
        doTest(fileName);
    }

    @TestMetadata("indexPlusPlusInsideExpression_indexUsedBeforeIncrement2.kt")
    public void testIndexPlusPlusInsideExpression_indexUsedBeforeIncrement2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/indexPlusPlusInsideExpression_indexUsedBeforeIncrement2.kt");
        doTest(fileName);
    }

    @TestMetadata("indexPlusPlusIsNotLastStatement.kt")
    public void testIndexPlusPlusIsNotLastStatement() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/indexPlusPlusIsNotLastStatement.kt");
        doTest(fileName);
    }

    @TestMetadata("indexPlusPlusIsNotLastStatement_indexUsedAfterIncrement.kt")
    public void testIndexPlusPlusIsNotLastStatement_indexUsedAfterIncrement() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/indexPlusPlusIsNotLastStatement_indexUsedAfterIncrement.kt");
        doTest(fileName);
    }

    @TestMetadata("indexWithNestedLoop.kt")
    public void testIndexWithNestedLoop() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/indexWithNestedLoop.kt");
        doTest(fileName);
    }

    @TestMetadata("intArray.kt")
    public void testIntArray() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/intArray.kt");
        doTest(fileName);
    }

    @TestMetadata("itAlreadyUsed.kt")
    public void testItAlreadyUsed() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/itAlreadyUsed.kt");
        doTest(fileName);
    }

    @TestMetadata("lastIndexOf.kt")
    public void testLastIndexOf() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/lastIndexOf.kt");
        doTest(fileName);
    }

    @TestMetadata("lastOrNull_ifAssign.kt")
    public void testLastOrNull_ifAssign() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/lastOrNull_ifAssign.kt");
        doTest(fileName);
    }

    @TestMetadata("map.kt")
    public void testMap() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/map.kt");
        doTest(fileName);
    }

    @TestMetadata("mapAndFilterIndexed.kt")
    public void testMapAndFilterIndexed() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapAndFilterIndexed.kt");
        doTest(fileName);
    }

    @TestMetadata("mapIndexed.kt")
    public void testMapIndexed() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapIndexed.kt");
        doTest(fileName);
    }

    @TestMetadata("mapIndexedNotNull.kt")
    public void testMapIndexedNotNull() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapIndexedNotNull.kt");
        doTest(fileName);
    }

    @TestMetadata("mapIndexedNotNullTo.kt")
    public void testMapIndexedNotNullTo() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapIndexedNotNullTo.kt");
        doTest(fileName);
    }

    @TestMetadata("mapIndexedNotNullTo_elvisContinue.kt")
    public void testMapIndexedNotNullTo_elvisContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapIndexedNotNullTo_elvisContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("mapIndexedNotNull_elvisContinue.kt")
    public void testMapIndexedNotNull_elvisContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapIndexedNotNull_elvisContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("mapIndexedTo.kt")
    public void testMapIndexedTo() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapIndexedTo.kt");
        doTest(fileName);
    }

    @TestMetadata("mapIndexed_afterFilter.kt")
    public void testMapIndexed_afterFilter() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapIndexed_afterFilter.kt");
        doTest(fileName);
    }

    @TestMetadata("mapIndexed_twice.kt")
    public void testMapIndexed_twice() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapIndexed_twice.kt");
        doTest(fileName);
    }

    @TestMetadata("mapNotNull.kt")
    public void testMapNotNull() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapNotNull.kt");
        doTest(fileName);
    }

    @TestMetadata("mapNotNullTo.kt")
    public void testMapNotNullTo() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapNotNullTo.kt");
        doTest(fileName);
    }

    @TestMetadata("mapNotNullTo_elvisContinue.kt")
    public void testMapNotNullTo_elvisContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapNotNullTo_elvisContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("mapNotNull_elvisContinue.kt")
    public void testMapNotNull_elvisContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapNotNull_elvisContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("mapNotNull_nestedLoopElvisContinue.kt")
    public void testMapNotNull_nestedLoopElvisContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapNotNull_nestedLoopElvisContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("mapNotNull_wrongElvisContinue.kt")
    public void testMapNotNull_wrongElvisContinue() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapNotNull_wrongElvisContinue.kt");
        doTest(fileName);
    }

    @TestMetadata("mapTo.kt")
    public void testMapTo() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapTo.kt");
        doTest(fileName);
    }

    @TestMetadata("mapTo2.kt")
    public void testMapTo2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapTo2.kt");
        doTest(fileName);
    }

    @TestMetadata("mapTo3.kt")
    public void testMapTo3() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapTo3.kt");
        doTest(fileName);
    }

    @TestMetadata("mapTo4.kt")
    public void testMapTo4() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapTo4.kt");
        doTest(fileName);
    }

    @TestMetadata("mapTo_inputVarNotUsed.kt")
    public void testMapTo_inputVarNotUsed() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapTo_inputVarNotUsed.kt");
        doTest(fileName);
    }

    @TestMetadata("mapUsesOldIndexAfterFilter.kt")
    public void testMapUsesOldIndexAfterFilter() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapUsesOldIndexAfterFilter.kt");
        doTest(fileName);
    }

    @TestMetadata("mapVar.kt")
    public void testMapVar() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/mapVar.kt");
        doTest(fileName);
    }

    @TestMetadata("map_var.kt")
    public void testMap_var() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/map_var.kt");
        doTest(fileName);
    }

    @TestMetadata("map_variableStillNeeded.kt")
    public void testMap_variableStillNeeded() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/map_variableStillNeeded.kt");
        doTest(fileName);
    }

    @TestMetadata("max1.kt")
    public void testMax1() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/max1.kt");
        doTest(fileName);
    }

    @TestMetadata("max2.kt")
    public void testMax2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/max2.kt");
        doTest(fileName);
    }

    @TestMetadata("max3.kt")
    public void testMax3() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/max3.kt");
        doTest(fileName);
    }

    @TestMetadata("max4.kt")
    public void testMax4() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/max4.kt");
        doTest(fileName);
    }

    @TestMetadata("max5.kt")
    public void testMax5() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/max5.kt");
        doTest(fileName);
    }

    @TestMetadata("max6.kt")
    public void testMax6() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/max6.kt");
        doTest(fileName);
    }

    @TestMetadata("max7.kt")
    public void testMax7() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/max7.kt");
        doTest(fileName);
    }

    @TestMetadata("min1.kt")
    public void testMin1() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/min1.kt");
        doTest(fileName);
    }

    @TestMetadata("min2.kt")
    public void testMin2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/min2.kt");
        doTest(fileName);
    }

    @TestMetadata("min3.kt")
    public void testMin3() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/min3.kt");
        doTest(fileName);
    }

    @TestMetadata("min4.kt")
    public void testMin4() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/min4.kt");
        doTest(fileName);
    }

    @TestMetadata("min5.kt")
    public void testMin5() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/min5.kt");
        doTest(fileName);
    }

    @TestMetadata("moveInitializationsCloserToLoop.kt")
    public void testMoveInitializationsCloserToLoop() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/moveInitializationsCloserToLoop.kt");
        doTest(fileName);
    }

    @TestMetadata("none_ifReturn.kt")
    public void testNone_ifReturn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/none_ifReturn.kt");
        doTest(fileName);
    }

    @TestMetadata("prefixIndexPlusPlusInsideExpression.kt")
    public void testPrefixIndexPlusPlusInsideExpression() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/prefixIndexPlusPlusInsideExpression.kt");
        doTest(fileName);
    }

    @TestMetadata("range.kt")
    public void testRange() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/range.kt");
        doTest(fileName);
    }

    @TestMetadata("resultCollectionUsedInsideLoop.kt")
    public void testResultCollectionUsedInsideLoop() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/resultCollectionUsedInsideLoop.kt");
        doTest(fileName);
    }

    @TestMetadata("smartCastNotBroken.kt")
    public void testSmartCastNotBroken() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/smartCastNotBroken.kt");
        doTest(fileName);
    }

    @TestMetadata("smartCastNotBroken2.kt")
    public void testSmartCastNotBroken2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/smartCastNotBroken2.kt");
        doTest(fileName);
    }

    @TestMetadata("smartCastNotNullRequired.kt")
    public void testSmartCastNotNullRequired() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/smartCastNotNullRequired.kt");
        doTest(fileName);
    }

    @TestMetadata("smartCastNotRequired.kt")
    public void testSmartCastNotRequired() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/smartCastNotRequired.kt");
        doTest(fileName);
    }

    @TestMetadata("smartCastRequired.kt")
    public void testSmartCastRequired() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/smartCastRequired.kt");
        doTest(fileName);
    }

    @TestMetadata("smartCastRequired2.kt")
    public void testSmartCastRequired2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/smartCastRequired2.kt");
        doTest(fileName);
    }

    @TestMetadata("smartCastRequired3.kt")
    public void testSmartCastRequired3() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/smartCastRequired3.kt");
        doTest(fileName);
    }

    @TestMetadata("smartCastRequired4.kt")
    public void testSmartCastRequired4() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/smartCastRequired4.kt");
        doTest(fileName);
    }

    @TestMetadata("smartCastRequired5.kt")
    public void testSmartCastRequired5() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/smartCastRequired5.kt");
        doTest(fileName);
    }

    @TestMetadata("smartCastThisRequired.kt")
    public void testSmartCastThisRequired() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/smartCastThisRequired.kt");
        doTest(fileName);
    }

    @TestMetadata("takeWhile.kt")
    public void testTakeWhile() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/takeWhile.kt");
        doTest(fileName);
    }

    @TestMetadata("takeWhile_nestedLoop.kt")
    public void testTakeWhile_nestedLoop() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/takeWhile_nestedLoop.kt");
        doTest(fileName);
    }

    @TestMetadata("takeWhile_wrongBreak.kt")
    public void testTakeWhile_wrongBreak() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/takeWhile_wrongBreak.kt");
        doTest(fileName);
    }

    @TestMetadata("toList.kt")
    public void testToList() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/toList.kt");
        doTest(fileName);
    }

    @TestMetadata("toList2.kt")
    public void testToList2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/toList2.kt");
        doTest(fileName);
    }

    @TestMetadata("toList3.kt")
    public void testToList3() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/toList3.kt");
        doTest(fileName);
    }

    @TestMetadata("toMutableSet.kt")
    public void testToMutableSet() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/toMutableSet.kt");
        doTest(fileName);
    }

    @TestMetadata("toMutableSet2.kt")
    public void testToMutableSet2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/toMutableSet2.kt");
        doTest(fileName);
    }

    @TestMetadata("toMutableSet3.kt")
    public void testToMutableSet3() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/toMutableSet3.kt");
        doTest(fileName);
    }

    @TestMetadata("toSet.kt")
    public void testToSet() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/toSet.kt");
        doTest(fileName);
    }

    @TestMetadata("toSetWithMap.kt")
    public void testToSetWithMap() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/toSetWithMap.kt");
        doTest(fileName);
    }

    @TestMetadata("twoInitializationsBeforeLoop.kt")
    public void testTwoInitializationsBeforeLoop() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/intentions/loopToCallChain/twoInitializationsBeforeLoop.kt");
        doTest(fileName);
    }
}
